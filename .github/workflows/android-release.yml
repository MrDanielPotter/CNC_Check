name: Build Android Release APK

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: "17"

      - name: Install system deps & Python tools
        run: |
          sudo apt update
          sudo apt install -y git zip unzip wget build-essential ccache libffi-dev libssl-dev libsqlite3-dev zlib1g-dev
          python3 -m pip install --upgrade pip
          python3 -m pip install buildozer cython

      - name: Install Android SDK command-line tools
        run: |
          ANDROID_SDK_ROOT="${HOME}/android-sdk"
          echo "ANDROID_SDK_ROOT=${ANDROID_SDK_ROOT}" >> $GITHUB_ENV
          echo "ANDROID_HOME=${ANDROID_SDK_ROOT}" >> $GITHUB_ENV
          mkdir -p "${ANDROID_SDK_ROOT}/cmdline-tools"
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O /tmp/cli-tools.zip
          unzip -q /tmp/cli-tools.zip -d "${ANDROID_SDK_ROOT}/cmdline-tools"
          # переместим в expected layout: cmdline-tools/latest/...
          mv "${ANDROID_SDK_ROOT}/cmdline-tools/cmdline-tools" "${ANDROID_SDK_ROOT}/cmdline-tools/latest"
          echo "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "${ANDROID_SDK_ROOT}/platform-tools" >> $GITHUB_PATH

      - name: Accept Android licenses & install specific SDK packages
        run: |
          yes | sdkmanager --licenses || true
          sdkmanager "platform-tools" "platforms;android-34" "build-tools;34.0.0"

      - name: Decode keystore (from GitHub Secret)
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > mykey.keystore

      - name: Build release APK with Buildozer
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }}
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
        run: |
          buildozer -v android release

      - name: Sign APK with jarsigner
        env:
          STOREPASS: ${{ secrets.KEYSTORE_PASSWORD }}
          KEYPASS: ${{ secrets.KEY_PASSWORD }}
          ALIAS: ${{ secrets.KEY_ALIAS }}
        run: |
          jarsigner -verbose \
            -keystore mykey.keystore \
            -storepass "$STOREPASS" \
            -keypass "$KEYPASS" \
            bin/*-release-unsigned.apk "$ALIAS"

      - name: Align and re-sign with apksigner
        env:
          STOREPASS: ${{ secrets.KEYSTORE_PASSWORD }}
          KEYPASS: ${{ secrets.KEY_PASSWORD }}
        run: |
          sudo apt install -y zipalign apksigner
          set -e
          APK_IN=$(ls bin/*-release-unsigned.apk | head -n1)
          zipalign -v 4 "$APK_IN" aligned.apk
          apksigner sign \
            --ks mykey.keystore \
            --ks-pass pass:"$STOREPASS" \
            --key-pass pass:"$KEYPASS" \
            --out CNCChecklist-signed.apk aligned.apk
          apksigner verify --print-certs CNCChecklist-signed.apk

      - name: Upload signed APK
        uses: actions/upload-artifact@v4
        with:
          name: CNCChecklist-release
          path: CNCChecklist-signed.apk
