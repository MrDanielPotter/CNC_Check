name: Build Android Release APK

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-release:
    runs-on: ubuntu-latest

    env:
      P4A_SDK_ROOT: ${{ github.workspace }}/.buildozer/android/platform/android-sdk
      ANDROID_SDK_ROOT: ${{ github.workspace }}/.buildozer/android/platform/android-sdk
      ANDROID_HOME: ${{ github.workspace }}/.buildozer/android/platform/android-sdk
      ANDROIDAPI: "34"
      ANDROIDMINAPI: "26"
      ANDROID_BUILD_TOOLS_VERSION: "34.0.0"
      ANDROIDNDKVER: "25.1.8937393"

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Set up Java 17 (Temurin)"
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: "Install system and Python deps"
        shell: bash
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git zip unzip wget curl build-essential ccache \
            libffi-dev libssl-dev libsqlite3-dev zlib1g-dev
          python3 -m pip install --upgrade pip
          python3 -m pip install "buildozer>=1.5.0" "Cython<3.1" wheel

      - name: "Fetch Android Commandline Tools and layout"
        shell: bash
        run: |
          set -e
          SDK="${P4A_SDK_ROOT}"
          mkdir -p "${SDK}/cmdline-tools"
          URL="https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip"
          wget -q "${URL}" -O /tmp/cli.zip
          unzip -q /tmp/cli.zip -d /tmp/
          mkdir -p "${SDK}/cmdline-tools/latest"
          cp -r /tmp/cmdline-tools/* "${SDK}/cmdline-tools/latest/"
          mkdir -p "${SDK}/tools/bin"
          ln -sf "${SDK}/cmdline-tools/latest/bin/sdkmanager" "${SDK}/tools/bin/sdkmanager"
          echo "${SDK}/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "${SDK}/platform-tools" >> "$GITHUB_PATH"

      - name: "Accept SDK licenses and install SDK/NDK"
        shell: bash
        run: |
          set -e
          export ANDROID_SDK_ROOT="${P4A_SDK_ROOT}"
          export PATH="${P4A_SDK_ROOT}/cmdline-tools/latest/bin:${P4A_SDK_ROOT}/platform-tools:${PATH}"

          java -version || true
          sdkmanager --version || true

          yes | sdkmanager --sdk_root="${P4A_SDK_ROOT}" --licenses || true
          sdkmanager --sdk_root="${P4A_SDK_ROOT}" \
            "platform-tools" \
            "platforms;android-${ANDROIDAPI}" \
            "build-tools;${ANDROID_BUILD_TOOLS_VERSION}" \
            "ndk;${ANDROIDNDKVER}"

          if [ -d "${P4A_SDK_ROOT}/build-tools" ]; then
            find "${P4A_SDK_ROOT}/build-tools" -maxdepth 1 -type d -name "36*" -print -exec rm -rf {} \; || true
          fi

          test -x "${P4A_SDK_ROOT}/build-tools/${ANDROID_BUILD_TOOLS_VERSION}/aidl"

      - name: "Patch buildozer.spec"
        shell: bash
        run: |
          set -e
          SPEC="buildozer.spec"
          if [ ! -f "$SPEC" ]; then
            buildozer init
          fi
          # добавим AGP совместимый с Java 17
          if ! grep -q "android.gradle_dependencies" "$SPEC"; then
            echo "android.gradle_dependencies = com.android.tools.build:gradle:7.4.2" >> "$SPEC"
          fi

      - name: "Build APK (release)"
        shell: bash
        run: |
          set -e
          export ANDROID_SDK_ROOT="${P4A_SDK_ROOT}"
          export ANDROID_NDK_HOME="${P4A_SDK_ROOT}/ndk/${ANDROIDNDKVER}"
          export PATH="${P4A_SDK_ROOT}/cmdline-tools/latest/bin:${P4A_SDK_ROOT}/platform-tools:${PATH}"
          rm -f buildozer.log
          buildozer android release

      - name: "Decode keystore (from GitHub Secret)"
        shell: bash
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          set -e
          if [ -n "$ANDROID_KEYSTORE_BASE64" ]; then
            echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > mykey.keystore
          fi

      - name: "Align and Sign APK"
        shell: bash
        env:
          STOREPASS: ${{ secrets.KEYSTORE_PASSWORD }}
          KEYPASS: ${{ secrets.KEY_PASSWORD }}
          ALIAS: ${{ secrets.KEY_ALIAS }}
        run: |
          set -e
          APK_UNSIGNED=$(ls -1 bin/*-release-unsigned.apk | head -n 1 || true)
          if [ -z "$APK_UNSIGNED" ]; then
            echo "No unsigned APK found"
            exit 1
          fi
          ZIPALIGN="${P4A_SDK_ROOT}/build-tools/${ANDROID_BUILD_TOOLS_VERSION}/zipalign"
          APKSIGNER="${P4A_SDK_ROOT}/build-tools/${ANDROID_BUILD_TOOLS_VERSION}/apksigner"
          "$ZIPALIGN" -v -p 4 "$APK_UNSIGNED" aligned.apk
          if [ -f mykey.keystore ]; then
            "$APKSIGNER" sign \
              --ks mykey.keystore \
              --ks-pass pass:"$STOREPASS" \
              --key-pass pass:"$KEYPASS" \
              --ks-key-alias "$ALIAS" \
              --out CNCChecklist-signed.apk aligned.apk
          else
            mv aligned.apk CNCChecklist-unaligned-unsigned.apk
          fi

      - name: "Upload APK artifact"
        uses: actions/upload-artifact@v4
        with:
          name: CNCChecklist-release
          path: |
            CNCChecklist-signed.apk
            CNCChecklist-unaligned-unsigned.apk
          if-no-files-found: warn

      - name: "Upload buildozer log"
        uses: actions/upload-artifact@v4
        with:
          name: buildozer-log
          path: buildozer.log
          if-no-files-found: warn
