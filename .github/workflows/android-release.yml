name: Build Android Release APK

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-release:
    runs-on: ubuntu-latest

    env:
      # SDK ставим туда, куда по умолчанию смотрит buildozer/p4a
      P4A_SDK_ROOT: $HOME/.buildozer/android/platform/android-sdk
      ANDROID_SDK_ROOT: $HOME/.buildozer/android/platform/android-sdk
      ANDROID_HOME: $HOME/.buildozer/android/platform/android-sdk
      # Явно фиксируем целевые API/Build-Tools
      ANDROIDAPI: "34"
      ANDROIDMINAPI: "26"
      ANDROID_BUILD_TOOLS_VERSION: "34.0.0"
      # Версия NDK (side-by-side ID для r25b)
      ANDROIDNDKVER: "25.1.8937393"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Install system deps and Python tools
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git zip unzip wget curl build-essential ccache \
            libffi-dev libssl-dev libsqlite3-dev zlib1g-dev
          python3 -m pip install --upgrade pip
          python3 -m pip install "buildozer>=1.5.0" "Cython<3.1" wheel

      # ========== SDK CLI ==========
      - name: Install Android SDK Command-line Tools (latest) into Buildozer SDK root
        run: |
          mkdir -p "${P4A_SDK_ROOT}/cmdline-tools"
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O /tmp/cli-tools.zip
          unzip -q /tmp/cli-tools.zip -d "${P4A_SDK_ROOT}/cmdline-tools"
          mv "${P4A_SDK_ROOT}/cmdline-tools/cmdline-tools" "${P4A_SDK_ROOT}/cmdline-tools/latest"

          # PATH для sdkmanager/avdmanager и platform-tools
          echo "${P4A_SDK_ROOT}/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "${P4A_SDK_ROOT}/platform-tools" >> $GITHUB_PATH

          # Совместимость со старым путём, куда иногда смотрит p4a/buildozer
          mkdir -p "${P4A_SDK_ROOT}/tools/bin"
          ln -sf "${P4A_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" "${P4A_SDK_ROOT}/tools/bin/sdkmanager"

      - name: Accept Android SDK licenses & install stable SDK packages
        shell: bash
        run: |
          # Принятие лицензий
          yes | sdkmanager --sdk_root="${P4A_SDK_ROOT}" --licenses || true

          # Устанавливаем стабильные пакеты (без preview)
          sdkmanager --sdk_root="${P4A_SDK_ROOT}" \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;34.0.0"

          # Анти-preview: если p4a попросит 36.1.0-rc1, подсовываем ссылку на 34.0.0
          if [ ! -d "${P4A_SDK_ROOT}/build-tools/36.1.0-rc1" ]; then
            ln -s "${P4A_SDK_ROOT}/build-tools/34.0.0" "${P4A_SDK_ROOT}/build-tools/36.1.0-rc1"
          fi

          # Диагностика
          ls -la "${P4A_SDK_ROOT}/build-tools" || true
          sdkmanager --sdk_root="${P4A_SDK_ROOT}" --list | head -n 60 || true

      # ========== NDK ==========
      - name: Install Android NDK r25b (side-by-side)
        run: |
          # Ставим side-by-side NDK r25b в SDK-дерево: $P4A_SDK_ROOT/ndk/25.1.8937393
          sdkmanager --sdk_root="${P4A_SDK_ROOT}" "ndk;${ANDROIDNDKVER}"

          # Укажем переменные окружения для сборки (p4a умеет их читать)
          echo "ANDROIDNDK=${P4A_SDK_ROOT}/ndk/${ANDROIDNDKVER}" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=${P4A_SDK_ROOT}/ndk/${ANDROIDNDKVER}" >> $GITHUB_ENV
          echo "P4A_NDK_DIR=${P4A_SDK_ROOT}/ndk/${ANDROIDNDKVER}" >> $GITHUB_ENV

          # Диагностика
          ls -la "${P4A_SDK_ROOT}/ndk" || true
          ls -la "${P4A_SDK_ROOT}/ndk/${ANDROIDNDKVER}" || true

      # ========== aidl check ==========
      - name: Verify AIDL presence and version
        run: |
          AIDL_BIN="${P4A_SDK_ROOT}/build-tools/34.0.0/aidl"
          if [ ! -x "$AIDL_BIN" ]; then
            echo "ERROR: aidl not found at $AIDL_BIN"
            ls -la "${P4A_SDK_ROOT}/build-tools/34.0.0" || true
            exit 1
          fi
          echo "aidl found at: $AIDL_BIN"
          "$AIDL_BIN" --version || (echo "aidl exists but failed to run" && exit 1)

      # ========== Keystore ==========
      - name: Decode keystore (from GitHub Secret)
        run: |
          echo "${{ secrets.KEYSTORE_FILE }}" | base64 -d > mykey.keystore
          test -s mykey.keystore || (echo "Keystore is empty. Check KEYSTORE_FILE secret." && exit 1)

      # ========== Build ==========
      - name: Build release with Buildozer
        env:
          # buildozer/p4a будут использовать SDK/NDK из путей выше
          ANDROIDSDK: ${{ env.P4A_SDK_ROOT }}
          ANDROIDNDK: ${{ env.P4A_SDK_ROOT }}/ndk/${{ env.ANDROIDNDKVER }}
          ANDROID_NDK_HOME: ${{ env.P4A_SDK_ROOT }}/ndk/${{ env.ANDROIDNDKVER }}
          P4A_SDK_ROOT: ${{ env.P4A_SDK_ROOT }}
          P4A_NDK_DIR: ${{ env.P4A_SDK_ROOT }}/ndk/${{ env.ANDROIDNDKVER }}
          P4A_BUILD_TOOLS_VERSION: "34.0.0"
        run: |
          # Сборка релиза
          buildozer -v android release

      # ========== Sign ==========
      - name: Align & Sign APK (zipalign/apksigner from build-tools 34.0.0)
        env:
          STOREPASS: ${{ secrets.KEYSTORE_PASSWORD }}
          KEYPASS:   ${{ secrets.KEY_PASSWORD }}
          ALIAS:     ${{ secrets.KEY_ALIAS }}
        run: |
          set -e
          APK_UNSIGNED=$(ls -1 bin/*-release-unsigned.apk | head -n 1)
          test -f "$APK_UNSIGNED" || (echo "Unsigned APK not found" && exit 1)

          ZIPALIGN="${P4A_SDK_ROOT}/build-tools/34.0.0/zipalign"
          APKSIGNER="${P4A_SDK_ROOT}/build-tools/34.0.0/apksigner"
          test -x "$ZIPALIGN" || (echo "zipalign not found" && exit 1)
          test -x "$APKSIGNER" || (echo "apksigner not found" && exit 1)

          $ZIPALIGN -v -p 4 "$APK_UNSIGNED" aligned.apk
          $APKSIGNER sign \
            --ks mykey.keystore \
            --ks-pass pass:"$STOREPASS" \
            --key-pass pass:"$KEYPASS" \
            --ks-key-alias "$ALIAS" \
            --out CNCChecklist-signed.apk aligned.apk

          $APKSIGNER verify --print-certs CNCChecklist-signed.apk

      # ========== Artifact ==========
      - name: Upload signed APK
        uses: actions/upload-artifact@v4
        with:
          name: CNCChecklist-release
          path: CNCChecklist-signed.apk
