name: Build Android Release APK

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-release:
    runs-on: ubuntu-latest

    env:
      P4A_SDK_ROOT: ${{ github.workspace }}/.buildozer/android/platform/android-sdk
      ANDROID_SDK_ROOT: ${{ github.workspace }}/.buildozer/android/platform/android-sdk
      ANDROID_HOME: ${{ github.workspace }}/.buildozer/android/platform/android-sdk
      ANDROIDAPI: "34"
      ANDROIDMINAPI: "26"
      ANDROID_BUILD_TOOLS_VERSION: "34.0.0"
      ANDROIDNDKVER: "25.1.8937393"

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Set up Java 11 (Temurin)"
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"

      - name: "Install system and Python deps"
        shell: bash
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git zip unzip wget curl build-essential ccache \
            libffi-dev libssl-dev libsqlite3-dev zlib1g-dev
          python3 -m pip install --upgrade pip
          python3 -m pip install "buildozer>=1.5.0" "Cython<3.1" wheel

      - name: "Fetch Android Commandline Tools and layout"
        shell: bash
        run: |
          set -e
          SDK="${P4A_SDK_ROOT}"
          mkdir -p "${SDK}/cmdline-tools"
          URL="https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip"
          wget -q "${URL}" -O /tmp/cli.zip
          unzip -l /tmp/cli.zip | sed -n '1,40p'
          rm -rf /tmp/cmdline-tools
          unzip -q /tmp/cli.zip -d /tmp/
          mkdir -p "${SDK}/cmdline-tools/latest"
          cp -r /tmp/cmdline-tools/* "${SDK}/cmdline-tools/latest/"
          mkdir -p "${SDK}/tools/bin"
          ln -sf "${SDK}/cmdline-tools/latest/bin/sdkmanager" "${SDK}/tools/bin/sdkmanager"
          echo "${SDK}/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "${SDK}/platform-tools" >> "$GITHUB_PATH"

      - name: "Accept SDK licenses and install SDK/NDK"
        shell: bash
        run: |
          set -e
          export ANDROID_SDK_ROOT="${P4A_SDK_ROOT}"
          export PATH="${P4A_SDK_ROOT}/cmdline-tools/latest/bin:${P4A_SDK_ROOT}/platform-tools:${PATH}"

          java -version || true
          which sdkmanager && sdkmanager --version

          yes | sdkmanager --sdk_root="${P4A_SDK_ROOT}" --licenses || true
          sdkmanager --sdk_root="${P4A_SDK_ROOT}" \
            "platform-tools" \
            "platforms;android-${ANDROIDAPI}" \
            "build-tools;${ANDROID_BUILD_TOOLS_VERSION}" \
            "ndk;${ANDROIDNDKVER}"

          if [ -d "${P4A_SDK_ROOT}/build-tools" ]; then
            find "${P4A_SDK_ROOT}/build-tools" -maxdepth 1 -type d -name "36*" -print -exec rm -rf {} \; || true
          fi

          test -x "${P4A_SDK_ROOT}/build-tools/${ANDROID_BUILD_TOOLS_VERSION}/aidl"

      - name: "Prefetch python-for-android and verify androidstorage4kivy recipe"
        shell: bash
        run: |
          set -e
          P4A_DIR="$HOME/.buildozer/android/platform/python-for-android"
          if [ ! -d "$P4A_DIR" ]; then
            mkdir -p "$(dirname "$P4A_DIR")"
            git clone -b master --single-branch https://github.com/kivy/python-for-android.git "$P4A_DIR"
          fi
          if [ -d "$P4A_DIR/pythonforandroid/recipes/androidstorage4kivy" ]; then
            echo "Recipe androidstorage4kivy found"
          else
            echo "Recipe androidstorage4kivy NOT found"
            exit 1
          fi

      - name: "Patch buildozer.spec (sed-only)"
        shell: bash
        run: |
          set -e
          SPEC="buildozer.spec"
          if [ ! -f "$SPEC" ]; then
            buildozer init
          fi

          # --- set/update key=value (or append) ---
          kv () {
            local key="$1"; shift
            local val="$1"; shift
            if grep -Eq "^[[:space:]]*${key}[[:space:]]*=" "$SPEC"; then
              sed -i -E "s|^[[:space:]]*${key}[[:space:]]*=.*$|${key} = ${val}|" "$SPEC"
            else
              printf "%s = %s\n" "$key" "$val" >> "$SPEC"
            fi
          }

          kv "android.sdk_dir" "\$ANDROID_SDK_ROOT"
          kv "android.ndk_dir" "\$ANDROID_SDK_ROOT/ndk/${ANDROIDNDKVER}"
          kv "android.build_tools" "${ANDROID_BUILD_TOOLS_VERSION}"

          # requirements: ensure python3,kivy,android,androidstorage4kivy,kivymd==2.0.0
          if grep -Eq "^[[:space:]]*requirements[[:space:]]*=" "$SPEC"; then
            CUR_REQ=$(sed -n -E 's/^[[:space:]]*requirements[[:space:]]*=\s*(.*)$/\1/p' "$SPEC")
          else
            CUR_REQ=""
          fi

          # normalize: replace any kivymd* to kivymd==2.0.0 and add missing pkgs
          WANT="python3,kivy,android,androidstorage4kivy,kivymd==2.0.0"
          IFS=',' read -r -a want_arr <<< "$WANT"
          IFS=',' read -r -a cur_arr <<< "$CUR_REQ"
          out=""
          seen=""

          add_pkg () {
            local p="$1"
            local base="${p%%==*}"
            case "$base" in
              kivymd) p="kivymd==2.0.0" ;;
            esac
            if ! echo ",$seen," | grep -q ",$base,"; then
              out="${out}${out:+,}$p"
              seen="${seen},${base}"
            fi
          }

          for p in "${cur_arr[@]}"; do
            p=$(echo "$p" | xargs)
            [ -n "$p" ] && add_pkg "$p"
          done
          for p in "${want_arr[@]}"; do
            add_pkg "$p"
          done

          if grep -Eq "^[[:space:]]*requirements[[:space:]]*=" "$SPEC"; then
            sed -i -E "s|^[[:space:]]*requirements[[:space:]]*=.*$|requirements = ${out}|" "$SPEC"
          else
            printf "requirements = %s\n" "$out" >> "$SPEC"
          fi

          # permissions: merge INTERNET, READ/WRITE_EXTERNAL_STORAGE, CAMERA
          if grep -Eq "^[[:space:]]*android\.permissions[[:space:]]*=" "$SPEC"; then
            CUR_PERM=$(sed -n -E 's/^[[:space:]]*android\.permissions[[:space:]]*=\s*(.*)$/\1/p' "$SPEC")
          else
            CUR_PERM=""
          fi

          WANT_PERM="INTERNET,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE,CAMERA"
          IFS=',' read -r -a wantp_arr <<< "$WANT_PERM"
          IFS=',' read -r -a curp_arr <<< "$CUR_PERM"
          pout=""
          pseen=""

          add_perm () {
            local p="$1"
            p=$(echo "$p" | xargs)
            [ -z "$p" ] && return 0
            if ! echo ",$pseen," | grep -q ",$p,"; then
              pout="${pout}${pout:+,}$p"
              pseen="${pseen},${p}"
            fi
          }

          for p in "${curp_arr[@]}"; do add_perm "$p"; done
          for p in "${wantp_arr[@]}"; do add_perm "$p"; done

          if grep -Eq "^[[:space:]]*android\.permissions[[:space:]]*=" "$SPEC"; then
            sed -i -E "s|^[[:space:]]*android\.permissions[[:space:]]*=.*$|android.permissions = ${pout}|" "$SPEC"
          else
            printf "android.permissions = %s\n" "$pout" >> "$SPEC"
          fi

          echo "buildozer.spec patched:"
          grep -E "^(android\.sdk_dir|android\.ndk_dir|android\.build_tools|requirements|android\.permissions)" "$SPEC" || true

      - name: "Build APK (release)"
        shell: bash
        run: |
          set -e
          export ANDROID_SDK_ROOT="${P4A_SDK_ROOT}"
          export ANDROID_NDK_HOME="${P4A_SDK_ROOT}/ndk/${ANDROIDNDKVER}"
          export PATH="${P4A_SDK_ROOT}/cmdline-tools/latest/bin:${P4A_SDK_ROOT}/platform-tools:${PATH}"
          rm -f buildozer.log
          buildozer android release

      - name: "Decode keystore (from GitHub Secret)"
        shell: bash
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          set -e
          if [ -n "$ANDROID_KEYSTORE_BASE64" ]; then
            echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > mykey.keystore
            if [ ! -s mykey.keystore ]; then
              echo "Keystore is empty. Check ANDROID_KEYSTORE_BASE64 secret."
              exit 1
            fi
          else
            echo "No ANDROID_KEYSTORE_BASE64 secret provided — skipping decode."
          fi

      - name: "Align and Sign APK"
        shell: bash
        env:
          STOREPASS: ${{ secrets.KEYSTORE_PASSWORD }}
          KEYPASS: ${{ secrets.KEY_PASSWORD }}
          ALIAS: ${{ secrets.KEY_ALIAS }}
        run: |
          set -e
          APK_UNSIGNED=$(ls -1 bin/*-release-unsigned.apk | head -n 1 || true)
          if [ -z "$APK_UNSIGNED" ]; then
            echo "No unsigned APK found in bin/. See buildozer.log for details."
            exit 1
          fi

          ZIPALIGN="${P4A_SDK_ROOT}/build-tools/${ANDROID_BUILD_TOOLS_VERSION}/zipalign"
          APKSIGNER="${P4A_SDK_ROOT}/build-tools/${ANDROID_BUILD_TOOLS_VERSION}/apksigner"
          test -x "$ZIPALIGN" || (echo "zipalign not found" && exit 1)
          test -x "$APKSIGNER" || (echo "apksigner not found" && exit 1)

          "$ZIPALIGN" -v -p 4 "$APK_UNSIGNED" aligned.apk

          if [ -f mykey.keystore ] && [ -n "$STOREPASS" ] && [ -n "$KEYPASS" ] && [ -n "$ALIAS" ]; then
            "$APKSIGNER" sign \
              --ks mykey.keystore \
              --ks-pass pass:"$STOREPASS" \
              --key-pass pass:"$KEYPASS" \
              --ks-key-alias "$ALIAS" \
              --out CNCChecklist-signed.apk aligned.apk
            "$APKSIGNER" verify --print-certs CNCChecklist-signed.apk
          else
            echo "Keystore or passwords not provided — uploading aligned.apk unsigned."
            mv aligned.apk CNCChecklist-unaligned-unsigned.apk
          fi

      - name: "Upload APK artifact"
        uses: actions/upload-artifact@v4
        with:
          name: CNCChecklist-release
          path: |
            CNCChecklist-signed.apk
            CNCChecklist-unaligned-unsigned.apk
          if-no-files-found: warn

      - name: "Upload buildozer log"
        uses: actions/upload-artifact@v4
        with:
          name: buildozer-log
          path: buildozer.log
          if-no-files-found: warn
