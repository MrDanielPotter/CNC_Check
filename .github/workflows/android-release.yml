name: Build Android Release APK

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-release:
    runs-on: ubuntu-latest

    env:
      P4A_SDK_ROOT: ${{ github.workspace }}/.buildozer/android/platform/android-sdk
      ANDROID_SDK_ROOT: ${{ github.workspace }}/.buildozer/android/platform/android-sdk
      ANDROID_HOME: ${{ github.workspace }}/.buildozer/android/platform/android-sdk
      ANDROIDAPI: "34"
      ANDROIDMINAPI: "26"
      ANDROID_BUILD_TOOLS_VERSION: "34.0.0"
      ANDROIDNDKVER: "25.1.8937393"

    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Set up Java 17 (Temurin)"
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: "Install system and Python deps"
        shell: bash
        run: |
          set -e
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            git zip unzip wget curl build-essential ccache \
            libffi-dev libssl-dev libsqlite3-dev zlib1g-dev
          python3 -m pip install --upgrade pip
          python3 -m pip install "buildozer>=1.5.0" "Cython<3.1" wheel

      - name: "Fetch Android Commandline Tools and layout (with tools symlink)"
        shell: bash
        run: |
          set -e
          SDK="${P4A_SDK_ROOT}"

          mkdir -p "${SDK}/cmdline-tools"

          # Commandline-tools (Java 17 совместимые)
          URL="https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip"
          wget -q "${URL}" -O /tmp/cli.zip
          rm -rf /tmp/cmdline-tools
          unzip -q /tmp/cli.zip -d /tmp/

          rm -rf "${SDK}/cmdline-tools/latest"
          mkdir -p "${SDK}/cmdline-tools/latest"
          cp -r /tmp/cmdline-tools/* "${SDK}/cmdline-tools/latest/"

          # Симлинк каталога tools -> cmdline-tools/latest для совместимости p4a/Buildozer
          rm -rf "${SDK}/tools"
          ln -sfn "${SDK}/cmdline-tools/latest" "${SDK}/tools"

          # PATH
          echo "${SDK}/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
          echo "${SDK}/platform-tools" >> "$GITHUB_PATH"

          # Маркеры пакета tools, чтобы p4a считал SDK валидным
          printf "Pkg.Revision=%s\nPkg.Path=tools\n" "${ANDROID_BUILD_TOOLS_VERSION}" > "${SDK}/source.properties"
          mkdir -p "${SDK}/tools"
          printf "Pkg.Revision=%s\nPkg.Path=tools\n" "${ANDROID_BUILD_TOOLS_VERSION}" > "${SDK}/tools/source.properties"
          printf '%s\n' \
            '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>' \
            '<sdk:sdk-repository xmlns:sdk="http://schemas.android.com/sdk/android/repo/repository2/01">' \
            '  <localPackage path="tools" obsolete="false">' \
            '    <type-details xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:type="sdk:genericDetailsType"/>' \
            '    <revision><major>2</major><minor>0</minor><micro>0</micro></revision>' \
            '    <display-name>Android SDK Tools 2</display-name>' \
            '  </localPackage>' \
            '</sdk:sdk-repository>' \
            > "${SDK}/tools/package.xml"

      - name: "Accept SDK licenses and install SDK/NDK"
        shell: bash
        run: |
          set -e
          export ANDROID_SDK_ROOT="${P4A_SDK_ROOT}"
          export PATH="${P4A_SDK_ROOT}/cmdline-tools/latest/bin:${P4A_SDK_ROOT}/platform-tools:${PATH}"

          java -version || true
          sdkmanager --version || true

          yes | sdkmanager --sdk_root="${P4A_SDK_ROOT}" --licenses || true
          sdkmanager --sdk_root="${P4A_SDK_ROOT}" \
            "platform-tools" \
            "platforms;android-${ANDROIDAPI}" \
            "build-tools;${ANDROID_BUILD_TOOLS_VERSION}" \
            "ndk;${ANDROIDNDKVER}"

          # Контроль
          test -d "${P4A_SDK_ROOT}/platforms/android-${ANDROIDAPI}"
          test -x "${P4A_SDK_ROOT}/build-tools/${ANDROID_BUILD_TOOLS_VERSION}/aidl"
          test -d "${P4A_SDK_ROOT}/ndk/${ANDROIDNDKVER}"

      - name: "Create p4a Home symlinks to prepared SDK/NDK (incl. r25b alias)"
        shell: bash
        run: |
          set -e
          mkdir -p "$HOME/.buildozer/android/platform"
          ln -sfn "${P4A_SDK_ROOT}" "$HOME/.buildozer/android/platform/android-sdk"
          ln -sfn "${P4A_SDK_ROOT}/ndk/${ANDROIDNDKVER}" "$HOME/.buildozer/android/platform/android-ndk-${ANDROIDNDKVER}"
          ln -sfn "${P4A_SDK_ROOT}/ndk/${ANDROIDNDKVER}" "$HOME/.buildozer/android/platform/android-ndk-r25b"
          echo "P4A_SDK_DIR=${P4A_SDK_ROOT}" >> $GITHUB_ENV
          echo "P4A_NDK_DIR=${P4A_SDK_ROOT}/ndk/${ANDROIDNDKVER}" >> $GITHUB_ENV

      - name: "Build APK (release)"
        shell: bash
        run: |
          set -e
          export ANDROID_SDK_ROOT="${P4A_SDK_ROOT}"
          export ANDROID_NDK_HOME="${P4A_SDK_ROOT}/ndk/${ANDROIDNDKVER}"
          export PATH="${P4A_SDK_ROOT}/cmdline-tools/latest/bin:${P4A_SDK_ROOT}/platform-tools:${PATH}"

          # Подстраховка: tools -> cmdline-tools/latest
          if [ ! -e "${ANDROID_SDK_ROOT}/tools" ]; then
            ln -sfn "${ANDROID_SDK_ROOT}/cmdline-tools/latest" "${ANDROID_SDK_ROOT}/tools"
          fi

          echo "======= ENV (ANDROID/P4A/JAVA/GRADLE) ======="
          env | sort | grep -E 'ANDROID|P4A|JAVA|GRADLE' || true
          echo "======= SDK structure (top 120 lines) ======="
          ls -R "$ANDROID_SDK_ROOT" | head -n 120 || true

          rm -f buildozer.log
          echo ">>> START buildozer android release (tee logging)"
          set -o pipefail
          buildozer android release 2>&1 | tee buildozer.log

      - name: "Show buildozer log tail"
        if: always()
        shell: bash
        run: |
          if [ -f buildozer.log ]; then
            echo "===== LAST 300 lines of buildozer.log ====="
            tail -n 300 buildozer.log
          else
            echo "No buildozer.log was generated."
          fi

      - name: "Decode keystore (from GitHub Secret)"
        if: always()
        shell: bash
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          set -e
          if [ -n "$ANDROID_KEYSTORE_BASE64" ]; then
            echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > mykey.keystore
            if [ ! -s mykey.keystore ]; then
              echo "Keystore is empty. Check ANDROID_KEYSTORE_BASE64 secret."
              exit 1
            fi
          else
            echo "No ANDROID_KEYSTORE_BASE64 provided — skipping decode."
          fi

      - name: "Align and Sign APK"
        if: always()
        shell: bash
        env:
          STOREPASS: ${{ secrets.KEYSTORE_PASSWORD }}
          KEYPASS: ${{ secrets.KEY_PASSWORD }}
          ALIAS: ${{ secrets.KEY_ALIAS }}
        run: |
          set -e
          APK_UNSIGNED=$(ls -1 bin/*-release-unsigned.apk 2>/dev/null | head -n 1 || true)
          if [ -z "$APK_UNSIGNED" ]; then
            echo "No unsigned APK found in bin/ — skipping sign."
            exit 0
          fi

          ZIPALIGN="${P4A_SDK_ROOT}/build-tools/${ANDROID_BUILD_TOOLS_VERSION}/zipalign"
          APKSIGNER="${P4A_SDK_ROOT}/build-tools/${ANDROID_BUILD_TOOLS_VERSION}/apksigner"
          test -x "$ZIPALIGN" || (echo "zipalign not found" && exit 1)
          test -x "$APKSIGNER" || (echo "apksigner not found" && exit 1)

          "$ZIPALIGN" -v -p 4 "$APK_UNSIGNED" aligned.apk

          if [ -f mykey.keystore ] && [ -n "$STOREPASS" ] && [ -n "$KEYPASS" ] && [ -n "$ALIAS" ]; then
            "$APKSIGNER" sign \
              --ks mykey.keystore \
              --ks-pass pass:"$STOREPASS" \
              --key-pass pass:"$KEYPASS" \
              --ks-key-alias "$ALIAS" \
              --out CNCChecklist-signed.apk aligned.apk
            "$APKSIGNER" verify --print-certs CNCChecklist-signed.apk
          else
            echo "Keystore or passwords not provided — uploading aligned.apk unsigned."
            mv aligned.apk CNCChecklist-unaligned-unsigned.apk
          fi

      - name: "Upload APK artifact"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: CNCChecklist-release
          path: |
            CNCChecklist-signed.apk
            CNCChecklist-unaligned-unsigned.apk
          if-no-files-found: warn

      - name: "Upload buildozer log"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: buildozer-log
          path: buildozer.log
          if-no-files-found: warn