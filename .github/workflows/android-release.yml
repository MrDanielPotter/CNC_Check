name: Build Android Release APK

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-release:
    runs-on: ubuntu-latest

    # Только простые строки без выражений
    env:
      ANDROID_NDK_VERSION: "25.2.9519653"
      ANDROID_BUILD_TOOLS: "34.0.0"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Setup Java 11 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "11"

      - name: Verify Java toolchain
        run: |
          java -version
          javac -version
          echo "JAVA_HOME=$JAVA_HOME"

      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            unzip wget git libssl-dev libffi-dev build-essential \
            libsqlite3-dev zlib1g-dev libbz2-dev libreadline-dev \
            libncurses5-dev libncursesw5-dev liblzma-dev

      - name: Install Buildozer
        run: |
          python -m pip install --upgrade pip
          pip install "cython==0.29.37" buildozer

      # Ставит SDK, build-tools и NDK и экспортирует ANDROID_SDK_ROOT
      - name: Setup Android SDK, Build-Tools and NDK
        uses: android-actions/setup-android@v3
        with:
          api-levels: "34"
          build-tools: ${{ env.ANDROID_BUILD_TOOLS }}
          ndk: ${{ env.ANDROID_NDK_VERSION }}

      # Приводим переменные к виду, который ожидает Buildozer/p4a
      - name: Export Android envs for Buildozer
        shell: bash
        run: |
          set -euo pipefail
          echo "ANDROID_HOME=${ANDROID_SDK_ROOT}" >> "$GITHUB_ENV"
          echo "ANDROID_NDK_HOME=${ANDROID_SDK_ROOT}/ndk/${ANDROID_NDK_VERSION}" >> "$GITHUB_ENV"
          echo "PATH=$PATH:${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin:${ANDROID_SDK_ROOT}/platform-tools" >> "$GITHUB_ENV"

      # Чиним layout cmdline-tools (sdkmanager.jar) и принимаем лицензии
      - name: Fix cmdline-tools layout and accept licenses
        shell: bash
        run: |
          set -euo pipefail
          if [ ! -f "${ANDROID_SDK_ROOT}/cmdline-tools/latest/lib/sdkmanager.jar" ]; then
            echo "No cmdline-tools/latest detected. Linking an existing version..."
            CANDIDATE=$(ls -d "${ANDROID_SDK_ROOT}/cmdline-tools/"* 2>/dev/null | head -n1 || true)
            if [ -n "$CANDIDATE" ] && [ -f "${CANDIDATE}/lib/sdkmanager.jar" ]; then
              ln -sfn "$CANDIDATE" "${ANDROID_SDK_ROOT}/cmdline-tools/latest"
              echo "Linked $CANDIDATE -> cmdline-tools/latest"
            fi
          fi

          if [ -d "${ANDROID_SDK_ROOT}/build-tools" ]; then
            find "${ANDROID_SDK_ROOT}/build-tools" -maxdepth 1 -xtype l -name "*rc*" -print -delete || true
          fi

          yes | "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" --licenses

          "${ANDROID_SDK_ROOT}/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;${ANDROID_BUILD_TOOLS}" \
            "ndk;${ANDROID_NDK_VERSION}"

      # Патчим buildozer.spec: requirements и явные пути SDK/NDK/Build-Tools
      - name: Patch buildozer.spec (requirements & Android paths)
        shell: bash
        run: |
          set -euo pipefail
          SPEC="buildozer.spec"
          if [ ! -f "$SPEC" ]; then
            echo "ERROR: buildozer.spec not found"; exit 1
          fi

          if grep -q "^requirements" "$SPEC"; then
            sed -i 's/^requirements *=.*/requirements = python3,kivy,kivymd==2.0.0,reportlab,pillow,plyer,androidstorage4kivy/' "$SPEC"
          else
            echo "requirements = python3,kivy,kivymd==2.0.0,reportlab,pillow,plyer,androidstorage4kivy" >> "$SPEC"
          fi

          if ! grep -q "^\[buildozer\]" "$SPEC"; then
            {
              echo ""
              echo "[buildozer]"
              echo "android.sdk_dir = ${ANDROID_SDK_ROOT}"
              echo "android.ndk_dir = ${ANDROID_NDK_HOME}"
              echo "android.build_tools = ${ANDROID_BUILD_TOOLS}"
            } >> "$SPEC"
          else
            sed -i "s|^android\\.sdk_dir *=.*|android.sdk_dir = ${ANDROID_SDK_ROOT}|g" "$SPEC" || true
            sed -i "s|^android\\.ndk_dir *=.*|android.ndk_dir = ${ANDROID_NDK_HOME}|g" "$SPEC" || true
            if grep -q "^android\\.build_tools" "$SPEC"; then
              sed -i "s|^android\\.build_tools *=.*|android.build_tools = ${ANDROID_BUILD_TOOLS}|g" "$SPEC"
            else
              sed -i "/^\[buildozer\]/a android.build_tools = ${ANDROID_BUILD_TOOLS}" "$SPEC"
            fi
          fi

          echo "------ buildozer.spec (tail) ------"
          tail -n 50 "$SPEC"

      - name: Check DejaVu font asset
        run: |
          if [ ! -f "assets/DejaVuSans.ttf" ]; then
            echo "::warning::assets/DejaVuSans.ttf is missing. PDF Cyrillic text may render as squares."
          fi

      - name: Build release APK
        run: |
          buildozer android release --verbose

      - name: List build outputs
        run: |
          ls -la bin || true
          find . -type f -name "*.apk" -print || true

      - name: Upload APK artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android-apks
          path: |
            bin/*.apk
            **/*.apk
          if-no-files-found: warn
