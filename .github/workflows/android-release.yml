name: Build Android Release APK

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-release:
    runs-on: ubuntu-latest

    env:
      # Глобальные пути для SDK/NDK
      ANDROID_SDK_ROOT: ${{ runner.temp }}/android-sdk
      ANDROID_HOME: ${{ runner.temp }}/android-sdk
      ANDROID_NDK_VERSION: "25.2.9519653"   # стабильная для Kivy / p4a
      ANDROID_BUILD_TOOLS: "34.0.0"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # --- Python 3.11 (как у тебя локально)
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # --- Java 11 (Temurin). Проверено: Gradle/Buildozer нормально работают с 11.
      - name: Setup Java 11 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "11"

      - name: Verify Java toolchain
        run: |
          java -version
          javac -version
          echo "JAVA_HOME=$JAVA_HOME"

      # --- Системные пакеты для сборки
      - name: Install system deps
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            unzip wget git libssl-dev libffi-dev build-essential \
            libsqlite3-dev zlib1g-dev libbz2-dev libreadline-dev \
            libncurses5-dev libncursesw5-dev liblzma-dev

      # --- Устанавливаем Buildozer и базовые питон-зависимости для сборки
      - name: Install Python deps (buildozer)
        run: |
          python -m pip install --upgrade pip
          pip install "cython==0.29.37" buildozer

      # --- Android SDK/NDK через готовый action
      - name: Setup Android SDK, Build-Tools and NDK
        uses: android-actions/setup-android@v3
        with:
          # Поставим нужные уровни прямо через sdkmanager:
          api-levels: "34"
          build-tools: ${{ env.ANDROID_BUILD_TOOLS }}
          ndk: ${{ env.ANDROID_NDK_VERSION }}

      # --- Фиксируем переменные окружения, понятные Buildozer
      - name: Export Android envs for Buildozer
        run: |
          echo "ANDROID_NDK_HOME=${ANDROID_HOME}/ndk/${ANDROID_NDK_VERSION}" >> $GITHUB_ENV
          echo "PATH=$PATH:${ANDROID_HOME}/cmdline-tools/latest/bin:${ANDROID_HOME}/platform-tools" >> $GITHUB_ENV

      # --- Быстрый self-check sdkmanager.jar layout + принятие лицензий
      - name: Fix cmdline-tools layout (sdkmanager.jar) and accept licenses
        shell: bash
        run: |
          set -euo pipefail
          # Если нет latest/, создадим симлинк на существующую версию
          if [ ! -f "${ANDROID_HOME}/cmdline-tools/latest/lib/sdkmanager.jar" ]; then
            echo "No cmdline-tools/latest detected. Attempting to link an existing version..."
            if ls -d "${ANDROID_HOME}/cmdline-tools/"*"/lib/sdkmanager.jar" >/dev/null 2>&1; then
              CTV=$(dirname "$(dirname "$(ls -d ${ANDROID_HOME}/cmdline-tools/*/lib/sdkmanager.jar | head -n1)")")
              mkdir -p "${ANDROID_HOME}/cmdline-tools"
              ln -sfn "$CTV" "${ANDROID_HOME}/cmdline-tools/latest"
              echo "Linked ${CTV} -> cmdline-tools/latest"
            fi
          fi

          # Удалим битые/лишние rc-симлинки build-tools (частая причина падений)
          if [ -d "${ANDROID_HOME}/build-tools" ]; then
            find "${ANDROID_HOME}/build-tools" -maxdepth 1 -xtype l -name "*rc*" -print -delete || true
          fi

          yes | "${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager" --licenses

          # Явно дотянем требуемые компоненты
          "${ANDROID_HOME}/cmdline-tools/latest/bin/sdkmanager" \
            "platform-tools" \
            "platforms;android-34" \
            "build-tools;${ANDROID_BUILD_TOOLS}" \
            "ndk;${ANDROID_NDK_VERSION}"

      # --- Синхронизируем buildozer.spec под окружение CI (requirements/пути SDK/NDK)
      - name: Patch buildozer.spec (requirements & Android paths)
        shell: bash
        run: |
          set -euo pipefail
          SPEC="buildozer.spec"

          if [ ! -f "$SPEC" ]; then
            echo "ERROR: buildozer.spec not found in repo root"; exit 1
          fi

          # 1) requirements
          if grep -q "^requirements" "$SPEC"; then
            sed -i 's/^requirements *=.*/requirements = python3,kivy,kivymd==2.0.0,reportlab,pillow,plyer,androidstorage4kivy/' "$SPEC"
          else
            echo "requirements = python3,kivy,kivymd==2.0.0,reportlab,pillow,plyer,androidstorage4kivy" >> "$SPEC"
          fi

          # 2) Добавим в конец секцию [buildozer] с путями, если их нет
          if ! grep -q "^\[buildozer\]" "$SPEC"; then
            {
              echo ""
              echo "[buildozer]"
              echo "android.sdk_dir = ${ANDROID_HOME}"
              echo "android.ndk_dir = ${ANDROID_NDK_HOME}"
              echo "android.build_tools = ${ANDROID_BUILD_TOOLS}"
            } >> "$SPEC"
          else
            # обновим/добавим значения внутри секции
            sed -i "s|^android.sdk_dir *=.*|android.sdk_dir = ${ANDROID_HOME}|g" "$SPEC" || true
            sed -i "s|^android.ndk_dir *=.*|android.ndk_dir = ${ANDROID_NDK_HOME}|g" "$SPEC" || true
            if grep -q "^android.build_tools" "$SPEC"; then
              sed -i "s|^android.build_tools *=.*|android.build_tools = ${ANDROID_BUILD_TOOLS}|g" "$SPEC"
            else
              sed -i "/^\[buildozer\]/a android.build_tools = ${ANDROID_BUILD_TOOLS}" "$SPEC"
            fi
          fi

          echo "------ buildozer.spec (tail) ------"
          tail -n 50 "$SPEC"

      # --- Проверка наличия шрифта (для кириллицы в PDF). Не валим сборку, просто предупреждаем.
      - name: Check DejaVu font asset
        run: |
          if [ ! -f "assets/DejaVuSans.ttf" ]; then
            echo "::warning::assets/DejaVuSans.ttf is missing. PDF Cyrillic text may render as squares."
          fi

      # --- Сборка Release APK
      - name: Build release APK
        run: |
          buildozer android release --verbose
        # Если хочешь Debug параллельно, можно: buildozer android debug

      # --- Список результатов и загрузка артефактов
      - name: List build outputs
        run: |
          echo "Bin dir:"
          ls -la bin || true
          echo "Find APKs:"
          find . -type f -name "*.apk" -print || true

      - name: Upload APK artifacts (release & debug if present)
        uses: actions/upload-artifact@v4
        with:
          name: android-apks
          path: |
            bin/*.apk
            **/*.apk
          if-no-files-found: warn
